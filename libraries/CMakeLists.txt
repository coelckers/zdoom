include(CheckSymbolExists)
include(FetchContent)

fetchcontent_declare(ZMusic
	GIT_REPOSITORY https://github.com/coelckers/zmusic.git
	GIT_TAG 95e6bfcd8cd219eee85588cf1e24781f5fd45e38
)

option(FORCE_INTERNAL_BZIP2 "Use internal bzip2" OFF)
if(NOT FORCE_INTERNAL_BZIP2)
	find_package(BZip2 QUIET)
endif()
if(BZIP2_FOUND)
	message(STATUS "Using system bzip2 library, includes found at ${BZIP2_INCLUDE_DIRS}")
	set_property(TARGET BZip2::BZip2 PROPERTY IMPORTED_GLOBAL TRUE)
else()
	message(STATUS "Using internal bzip2 library")
	add_subdirectory(bzip2)
	add_library(BZip2::BZip2 ALIAS bz2)
endif()

option(FORCE_INTERNAL_ZLIB "Use internal zlib" OFF)
if(NOT FORCE_INTERNAL_ZLIB)
	find_package(ZLIB QUIET)
endif()
if(ZLIB_FOUND)
	message(STATUS "Using system zlib, includes found at ${ZLIB_INCLUDE_DIRS}")
	set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_GLOBAL TRUE)
else()
	message(STATUS "Using internal zlib")
	set(SKIP_INSTALL_ALL TRUE) # Avoid installing zlib
	add_subdirectory(zlib)
	add_library(ZLIB::ZLIB ALIAS z)

	# Setup variables for GME's CMakeLists
	set(ZLIB_LIBRARY ZLIB::ZLIB)
	get_property(ZLIB_INCLUDE_DIR TARGET ZLIB::ZLIB PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
endif()

option(FORCE_INTERNAL_JPEG "Use internal jpeg" OFF)
if(NOT FORCE_INTERNAL_JPEG)
	find_package(JPEG QUIET)
endif()
if(JPEG_FOUND AND NOT FORCE_INTERNAL_JPEG)
	message(STATUS "Using system jpeg library, includes found at ${JPEG_INCLUDE_DIRS}")
	set_property(TARGET JPEG::JPEG PROPERTY IMPORTED_GLOBAL TRUE)
else()
	message(STATUS "Using internal jpeg library")
	add_subdirectory(jpeg)
	add_library(JPEG::JPEG ALIAS jpeg)
endif()

option(HAVE_VULKAN "Enable Vulkan support" ON)
if(HAVE_VULKAN)
	add_subdirectory(glslang/glslang)
	add_subdirectory(glslang/spirv)
	add_subdirectory(glslang/OGLCompilersDLL)
endif()

add_subdirectory(lzma)
add_subdirectory(gdtoa)

option(FORCE_INTERNAL_ZMUSIC "Use internal ZMusic" OFF)
if(MSVC)
	# We have prebuilt libraries in this repo so don't autofetch by default
	option(FORCE_INTERNAL_ZMUSIC_AUTOFETCH "Fetch ZMusic source code" OFF)
else()
	set(FORCE_INTERNAL_ZMUSIC_AUTOFETCH ON)
endif()
if(NOT FORCE_INTERNAL_ZMUSIC)
	set(ZMUSIC_FLAG QUIET)
	if(NOT FORCE_INTERNAL_ZMUSIC_AUTOFETCH AND NOT MSVC)
		set(ZMUSIC_FLAG REQUIRED)
	endif()
	find_package(ZMusic ${ZMUSIC_FLAG} COMPONENTS Full)
endif()
if(ZMusic_FOUND AND NOT FORCE_INTERNAL_ZMUSIC)
	message(STATUS "Using system ZMusic library, config at ${ZMusic_DIR}")
	set_property(TARGET ZMusic::zmusic PROPERTY IMPORTED_GLOBAL TRUE)
else()
	message(STATUS "Using internal ZMusic library")

	fetchcontent_getproperties(ZMusic)
	if(NOT zmusic_POPULATED)
		if(FORCE_INTERNAL_ZMUSIC_AUTOFETCH)
			fetchcontent_populate(ZMusic)

			set(BUILD_SHARED_LIBS OFF)
			add_subdirectory(${zmusic_SOURCE_DIR} ${zmusic_BINARY_DIR} EXCLUDE_FROM_ALL)
		elseif(MSVC)
			# Use prebuilt library
			set(ZMUSIC_ROOT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../bin/windows/zmusic")

			add_library(ZMusic::zmusic UNKNOWN IMPORTED GLOBAL)
			target_include_directories(ZMusic::zmusic INTERFACE "${ZMUSIC_ROOT_PATH}/include")
			if(ZDOOM_TARGET_ARCH MATCHES "x86_64")
				set_target_properties(ZMusic::zmusic PROPERTIES IMPORTED_LOCATION "${ZMUSIC_ROOT_PATH}/64bit/zmusic.lib")
			elseif(ZDOOM_TARGET_ARCH MATCHES "arm")
				set_target_properties(ZMusic::zmusic PROPERTIES IMPORTED_LOCATION "${ZMUSIC_ROOT_PATH}/arm64/zmusic.lib")
			else()
				set_target_properties(ZMusic::zmusic PROPERTIES IMPORTED_LOCATION "${ZMUSIC_ROOT_PATH}/32bit/zmusic.lib")
			endif()
		else()
			# This should be unreachable
			message(SEND_ERROR "Suitable vendored/internal copy of ZMusic could not be located.")
		endif()
	endif()
endif()

if(ZDOOM_TARGET_ARCH MATCHES "x86_64")
	set(HAVE_VM_JIT ON)
endif()
if(HAVE_VM_JIT)
	option(FORCE_INTERNAL_ASMJIT "Use internal asmjit" ON)
	mark_as_advanced(FORCE_INTERNAL_ASMJIT)

	# no, we're not using external asmjit for now, we made too many modifications to our's.
	# if the asmjit author uses our changes then we'll update this.
	#find_package(asmjit)

	if(ASMJIT_FOUND AND NOT FORCE_INTERNAL_ASMJIT)
		message(STATUS "Using system asmjit, includes found at ${ASMJIT_INCLUDE_DIR}")
	else()
		message(STATUS "Using internal asmjit")
		set(SKIP_INSTALL_ALL TRUE)
		add_subdirectory(asmjit)
		set( ASMJIT_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libraries/asmjit )
		set( ASMJIT_LIBRARIES asmjit )
		set( ASMJIT_LIBRARY asmjit )
	endif()

	if(UNIX)
		check_symbol_exists("backtrace" "execinfo.h" HAVE_BACKTRACE)
		if(NOT HAVE_BACKTRACE)
			set(CMAKE_REQUIRED_FLAGS "-lexecinfo")
			check_symbol_exists("backtrace" "execinfo.h" HAVE_LIBEXECINFO)
			set(CMAKE_REQUIRED_FLAGS)
			if(HAVE_LIBEXECINFO)
				target_link_options(asmjit INTERFACE "-lexecinfo")
			else()
				set(HAVE_VM_JIT NO)
			endif()
		endif()
	endif()
endif()

if(UNIX)
	check_symbol_exists("fts_set" "fts.h" HAVE_FTS)
	if(NOT HAVE_FTS)
		include(FindPkgConfig)
		pkg_check_modules(MUSL_FTS musl-fts)
		if(MUSL_FTS_FOUND)
			add_library(musl-fts INTERFACE)
			target_link_options(musl-fts INTERFACE ${MUSL_FTS_LDFLAGS})
		else()
			message (ERROR "fts_* functions not found in the system" )
		endif()
	endif()
endif()
